#!/usr/bin/perl -w
##
# NAME:
# diffilter.pl
#
# PURPOSE:
# To find DIF files containing certain parameters (e.g. Cryospheric
# parameters). Files fulfilling the filter requirements are copied to a
# new directory.
#
# REQUIREMENTS:
# NA
#
# INPUT:
# NA
#
# OUTPUT:
# NA
#
# NOTES:
# NA
#
# BUGS:
# NA
#
# AUTHOR:
# Øystein Godøy, METNO/FOU, 2013-07-03 
#
# MODIFIED:
# Øystein Godøy, METNO/FOU, 2014-04-01: Added filtering on latitude for
# SAON purposes.
# Øystein Godøy, METNO/FOU, 2014-11-20: Changed latitude check to bounding
# box check.
#

use strict;
use warnings;
use Getopt::Std;
use XML::LibXML;
use File::Copy;
use Scalar::Util qw(looks_like_number);

sub usage;

use vars qw($opt_i $opt_o $opt_p $opt_b);

usage unless getopts("i:o:p:b:");
usage unless ($opt_i && $opt_o);

# Define search phrase for keywords
my $searchpar;
if ($opt_p) {
    $searchpar = "EARTH SCIENCE > ".$opt_p;
}

# Check that destination exists
unless (-d $opt_o) {
    mkdir $opt_o or die "Could not create destination directory $opt_o\n";
}

# Get filenames to loop through
opendir my $dh, $opt_i or die "Could not open $opt_i\n";
my @dc = readdir $dh;
closedir $dh;

# Loop through files and search for science keywords, copy files
# fulfilling requirements to new directory
my $parser = new XML::LibXML;
my($difdoc,@kw,@spb,$mystring,$kwmatch,$latmatch);
my $xpath = XML::LibXML::XPathContext->new();
$xpath->registerNs('dif', 'http://gcmd.gsfc.nasa.gov/Aboutus/xml/dif/');
foreach my $item (@dc) {
    next unless ($item =~ /\.xml$/);
    print "$item\n";
    $kwmatch = $latmatch = 0;
    $difdoc = $parser->parse_file($opt_i."/".$item);
    if ($opt_b) {
        @spb = $xpath->findnodes("/dif:DIF/dif:Spatial_Coverage", $difdoc);
        print "\tFound ". scalar @spb." bounding boxes in this file.\n";
        next unless (scalar @spb > 0);
        foreach my $reqnode (@spb) {
            my $dslati = $xpath->findvalue("dif:Southernmost_Latitude",$reqnode);
            last unless looks_like_number($dslati);
            my $dslatx = $xpath->findvalue("dif:Northernmost_Latitude",$reqnode);
            last unless looks_like_number($dslatx);
            my $dsloni = $xpath->findvalue("dif:Westernmost_Longitude",$reqnode);
            last unless looks_like_number($dsloni);
            my $dslonx = $xpath->findvalue("dif:Easternmost_Longitude",$reqnode);
            last unless looks_like_number($dslonx);
            print "\t[$dslati,$dslatx,$dsloni,$dslonx]\n";
            my($lati,$latx,$loni,$lonx) = split(/,/,$opt_b,4);
            if ($dslati >= $lati && $dslatx <= $latx && 
                $dsloni >= $loni && $dslonx <= $lonx) {
                $latmatch++; 
                last;
            }
        }
    }
    if ($opt_p) {
        @kw = $xpath->findnodes("/dif:DIF/dif:Parameters", $difdoc);
        print "\tFound ". scalar @kw." keyword sequences in this file.\n";
        foreach my $reqnode (@kw) {
            my $gcmdkw;
            my $catg = $xpath->findvalue("dif:Category",$reqnode);
            $gcmdkw = "$catg " if ($catg);
            my $topic = $xpath->findnodes("dif:Topic",$reqnode);
            $gcmdkw .= "> $topic " if ($topic);
            my $term = $xpath->findnodes("dif:Term",$reqnode);
            $gcmdkw .= "> $term" if ($term);
            my $var1 = $xpath->findnodes("dif:Variable_Level_1",$reqnode);
            $gcmdkw .= "> $var1" if ($var1);
            my $var2 = $xpath->findnodes("dif:Variable_Level_2",$reqnode);
            $gcmdkw .= "> $var2" if ($var2);
            print "\t$gcmdkw\n";
            if ($gcmdkw =~ /^$searchpar/i) {
                $kwmatch++;
                print "$item contains Cryospheric data...\n";
                last;
            }
        }
    }
    if (($opt_b && $opt_p && $latmatch && $kwmatch) ||
        ($opt_b && !$opt_p && $latmatch) ||
        ($opt_p && !$opt_b && $kwmatch)) {
        copy($opt_i."/".$item,$opt_o."/".$item) or 
        warn("Could not copy $item from $opt_i to $opt_o\n");
        $item =~ s/\.xml$/\.xmd/;
        copy($opt_i."/".$item,$opt_o."/".$item) or 
        warn("Could not copy $item from $opt_i to $opt_o\n");
    }
}

exit(0);

###########################################################

sub usage {

    print "$0 -i <idir> -o <odir> -p <parameters> -b <bounding box>\n";
    print "\t<idir>: input dir\n";
    print "\t<odir>: output dir\n";
    print "\t<topic>: GCMD science keywords topic to search for\n";
    print "\t<bounding box>: comma separated sequence, S,N,W,E with axes positive north- and eastwards.\n";
    print "\n";

    exit(0);
}

