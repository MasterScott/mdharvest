#!/usr/bin/perl -w
#
# NAME:
# harvest-sites
#
# PURPOSE:
# Harvest metadata from a number of data centres and prepare data for
# ingestion in METAMOD (adding configuration metadata). A log file
# describing the number of records harvested and kept is generated. 
#
# REQUIREMENTS:
# NA
#
# INPUT:
# NA
#
# OUTPUT:
# NA
#
# NOTES:
# For details on the harvest check harvest-metadata.
#
# Filtering is yet not fully implemented. Currently it is hardcoded for
# cryosphere usage...
#
# BUGS:
# NA
#
# AUTHOR:
# Øystein Godøy, METNO/FOU, 2014-01-05 
#
# MODIFIED:
# Øystein Godøy, METNO/FOU, 2015-05-11: Extracted sites information and
# put that in separate file. 
#

use strict;
use DateTime;
use Getopt::Std;

my %sites;
sub usage;

use vars qw($opt_c $opt_l $opt_f);
usage unless getopts("c:l:f:");
usage unless ($opt_c && $opt_l);

my $harvestlog = $opt_l;

createharvlist($opt_c, \%sites);

my $mh = "harvest-metadata";
my $fr = "filter-dif-records";
my($mycmd,$status);

#goto MONITOR;

# Do the harvest and filtering
foreach my $site (keys(%sites)) {
    print "Harvesting from $site...\n";
    print "\tUsing $sites{$site}{address}...\n";
    print "\t\tRequesting $sites{$site}{mdkw}...\n";
    $mycmd = defined($sites{$site}{pref}) ? 
        "$mh -i $sites{$site}{address} ".
        "-o $sites{$site}{dest} -p $sites{$site}{proto} ".
        "-t $sites{$site}{tag} -d $sites{$site}{mmdir} ".
        "-f $sites{$site}{pref}" :
        "$mh -i $sites{$site}{address} ".
        "-o $sites{$site}{dest} -p $sites{$site}{proto} ".
        "-t $sites{$site}{tag} -d $sites{$site}{mmdir}";
    $mycmd .= " -m $sites{$site}{mdkw}" if defined($sites{$site}{mdkw}); 
    $mycmd .= " -r $opt_f" if defined($opt_f); 

    $status = system($mycmd);
    print "Status: ".($status/255)."\n";

    # Need to be fixed...
    if (defined($sites{$site}{dest2})) {
        $mycmd = "$fr ".
        "-i $sites{$site}{dest} ".
        "-o $sites{$site}{dest2} ".
        "-p CRYOSPHERE ";
        $status = system($mycmd);
        print "Status: ".($status/255)."\n";
    }
}

#MONITOR:
# Check the harvested metadata and prepare monitoring statistics.
# Checking contents of XMD-files as these determine whether data is
# ingested or not.
my $dt = DateTime->now();
my $active = my $deleted = 0;
my $mypath;
open(my $lh, ">>$harvestlog") or die "Can't open logfile: $harvestlog.\n";
foreach my $site (keys(%sites)) {
    print "Checking harvest from $site...\n";
    if ($site eq "CC") {
        $mypath = $sites{$site}{dest};
    } else {
        $mypath = $sites{$site}{dest2};
    }
    # Check unfiltered first, then filtered records
    opendir(my $dh,$mypath) or die "Can't open $mypath\n";
    my @files = grep {/\.xmd$/} readdir($dh);
    closedir($dh);
    foreach my $file (@files) {
        open(my $fh, $mypath."/".$file) or die "Can't open $file";
        $active++ if (grep /status=\"active\"/,<$fh>);
        seek $fh,0,0;
        $deleted++ if (grep /status=\"deleted\"/,<$fh>);
        close($fh);
    }
    print $lh "$dt $site $active $deleted\n";
    $active = $deleted = 0;
}
close($lh);

exit;

########################################################### 

sub usage {

    print "\n";
    print "$0 -c <cfgfile> -l <logfile> -f <fromdate>\n";
    print "\n";

    exit;
}

sub createharvlist {

    my($cfgfile, $sitesref) = @_;

    open(my $fh, "<", $cfgfile) or die "Can't open the file $cfgfile";

    my $sitename;
    while (my $line =<$fh>) {
        chomp ($line);
        my($key, $value) = split(/\s*=>\s*/, $line);
        next if ($key =~ /^(\s*#)/);
        if ($key =~ /^\w/) {
            $sitename = $key;
            next;
        }
        $key =~ s/\s*//;
        $sitesref->{$sitename}->{$key} = $value;
    }

    close($fh);

    return;
}
