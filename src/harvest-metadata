#!/usr/bin/perl -w
#
# NAME:
# harvest-metadata
#
# PURPOSE:
# To harvest metadata from OAI-PMH and OGC CSW servers.
#
# REQUIREMENTS:
# NA
#
# INPUT:
# NA
#
# OUTPUT:
# NA
#
# NOTES:
# Based upon the harvester.pl script from the METAMOD OAI-PMH module.
# Should support sets in future versions for OAI-PMH.
#
# BUGS:
# NA
#
# AUTHOR:
# Øystein Godøy, METNO/FOU, 2012-06-21
#
# MODIFIED:
# Øystein Godøy, METNO/FOU, 2013-11-04: Added generation of XMD files.
# Øystein Godøy, METNO/FOU, 2014-03-12: Added missing modification of XMD
# files when datasets are marked as deleted.
# Øystein Godøy, METNO/FOU, 2014-04-02: Added support for sets in OAI-PMH.
# Øystein Godøy, METNO/FOU, 2014-11-20: Added support for specification of
# XML directory in METAMOD.
#

use strict;
use warnings;

use FindBin;

use Getopt::Std;
use LWP::UserAgent;
use URI::Escape qw(uri_escape);
use XML::LibXML;
use Data::Dump qw(dump);
use File::Basename;
use DateTime;

my($pid, $errlog, $config_file_or_dir, $mdt);

sub usage;

use vars qw($opt_i $opt_o $opt_p $opt_d $opt_t $opt_f $opt_m $opt_s $opt_r);
usage unless getopts("i:o:p:d:t:f:m:s:r:");
usage unless ($opt_i && $opt_o && $opt_p && $opt_t && $opt_d);

my $xmldirectory = $opt_o;
my $mmdir = $opt_d;
my $ownertag = $opt_t;
my $timenow = DateTime->now(time_zone => 'UTC');
$mdt = (defined($opt_m)) ? $opt_m : "dif";

my $url = $opt_i;
my $harvest_schema;

my $harvest_validation_schema;
$harvest_schema = XML::LibXML::Schema->new( location => $harvest_validation_schema ) if $harvest_validation_schema;

unless (-d $opt_o) {
    mkdir $opt_o or die "Could not create directory $opt_o\n";
}

if (do_harvest()) {
    print "Something failed during harvest and processing...\n";
    exit(1);
}

exit(0);

########################################################### 
# Soubroutines below...
#

#
# Add date_last_upd as cmdline option...
# Øystein Godøy, METNO/FOU, 2013-11-04 
#
sub do_harvest {

    my($urlsent, $retval);
    my $htype = $opt_p; 

    $retval = 0;

    print("Harvesting from $url using $htype\n");

    my($date_last_upd);

    if ($htype eq "OGCCSW") {
        $urlsent = $url. 
        "?request=GetRecords&constraintLanguage=CQL_TEXT&".
        "typeNames=csw:Record&resultType=results&".
        "outputSchema=http://www.isotc211.org/2005/gmd";
    } elsif ($htype eq "OAI-PMH") {
        if ($opt_s) {
            $urlsent = $url.
            "?verb=ListRecords".
            "&metadataPrefix=".$mdt.
            "&set=$opt_s";
        } elsif ($opt_r) { 
            $urlsent = $url.
            "?verb=ListRecords".
            "&from=".$opt_r.
            "&metadataPrefix=".$mdt;
        } elsif ($opt_s && $opt_r) { 
            $urlsent = $url.
            "?verb=ListRecords".
            "&from=".$opt_r.
            "&metadataPrefix=".$mdt.
            "&set=$opt_s";
        } else {
            $urlsent = $url.
            "?verb=ListRecords".
            "&metadataPrefix=".$mdt;
        }
    } else {
        die "Protocol $opt_p is not supported.\n";
    }
    # Check if this is to be here still...
    # Øystein Godøy, METNO/FOU, 2012-06-21 
    if (defined($date_last_upd)) {
        $urlsent .= '&from=' . substr( $date_last_upd, 0, 10 ); # use only date from timestamp
    }
    my $content_from_get = eval { getContentFromUrl($urlsent); };
    if ($@) {
        die("Error $@ for GET $urlsent\n");
    }

    # Process DIF records:
    # Implement process_CSW_ISO_records også...
    # Øystein Godøy, METNO/FOU, 2012-06-20 
    if ($htype eq "OAI-PMH") {
        print "Now interpreting the content...\n";
        eval {
            my $resumptionToken = process_DIF_records($content_from_get);
            # continue reading records if resumptiontoken is received
            while ($resumptionToken) {
                my $resumptionUrl = $url."?verb=ListRecords&resumptionToken=".uri_escape($resumptionToken);
                my $content_from_get = getContentFromUrl($resumptionUrl);
                last unless ($content_from_get);
                $resumptionToken = process_DIF_records($content_from_get);
            }
        };
        if ($@) { # OAI-PMH reports an error
            print("DIF processing error $@\n");
            $retval=1;
        }
    } elsif ($htype eq "OGCCSW") {
        process_CSWISO_records($content_from_get);
        if ($@) {
            print("CSW/ISO processing error $@\n");
            $retval=1;
        }
    }
    return($retval);
}

# 
# The purpose of this subroutine is to harvest, validate, split and
# transform the DIF records received. 
#
# During this process XMD files needs to be generated as well, if records
# are deleted XMD files should contain status="deleted" for further
# processing by the database ingestion and records not handled before
# should receive a XMD file for further usage.
# Øystein Godøy, METNO/FOU, 2013-11-04 
#
sub process_DIF_records {
    # parse DIF XML and extract records
    # returns a string if ResumptionToken, undef if none, dies on error
    my($content_from_get) = @_;
    my $parser = new XML::LibXML();
    my $oaiDoc;
    my $xmdfile;
    
    print "Now decoding the DIF received through OAI-PMH\n";
    eval {
        $oaiDoc = $parser->parse_string($content_from_get);
        if ($harvest_schema) {
            $harvest_schema->validate($oaiDoc);
        }
    };

    die "XML parser error: $@" if $@;

    my $xpath = XML::LibXML::XPathContext->new();
    $xpath->registerNs('oai', 'http://www.openarchives.org/OAI/2.0/');

    if ( my ($error) = $xpath->findnodes("/*/oai:error", $oaiDoc) ) {
        my $code = $error->getAttribute('code');
        if ($code eq 'noRecordsMatch') { # no new records, which is normal
            print($error->textContent."\n");
            return;
        }
        die "Harvest source error: " . $error->textContent;
    }

    # 
    # Check the type of response requested
    #
    my $mdstd = $xpath->findnodes('/oai:OAI-PMH/oai:request/@metadataPrefix', 
        $oaiDoc);
    $mdstd =~ tr/a-z/A-Z/;

    # 
    # Find the records in the response, each record contain a header and a
    # metadata section. The latter may be missing if status="deleted" in
    # the header.
    #
    my @records = $xpath->findnodes("/oai:OAI-PMH/oai:ListRecords/oai:record", $oaiDoc);
    print "\n";
    print("Found ", scalar @records, " DIF records\n");
    print "\n";
    my $i;
    foreach my $record (@records) {
        $i++;
        my $identifier = eval { 
            trim($xpath->findnodes("oai:header/oai:identifier", 
                    $record)->item(0)->textContent); 
        };
        if ($@ or (!$identifier)) {
            print("No identifier in record $i: $@\n" . $record->toString);
            return;
        }
        my $datestamp;
        eval { 
            $datestamp = $xpath->findnodes("oai:header/oai:datestamp", $record)->item(0)->textContent 
        };
        if ($@) {
            print("No datestamp: $@\n" . $record->toString);
            return;
        }
        my @statusNodes = $xpath->findnodes('oai:header/@status', $record);
        my $status = "active";
        if (@statusNodes > 0) {
            $status  = $statusNodes[0]->getValue;
        }

        #
        # Construct filename from identifier:
        #
        my $base_filename;
        printf "%4d %s\n",$i,$identifier;
        if (($url =~ m/http:\/\/www\.polardata\.ca\/oai\/provider/) ||
            ($url =~ m/http:\/\/www\.chinare\.org\.cn\/oai\/provider/)) {
            #$identifier =~ /^(\d+)_([\w-]+)$/;
            #print ">>> $identifier - $1 - $2\n";
            $base_filename = defined($opt_f) ?
                $xmldirectory."/"."$opt_f"."-".$identifier.".xml" : 
                $xmldirectory."/".$identifier.".xml";
            $xmdfile = $base_filename;
            $xmdfile =~ s/\.xml$/\.xmd/g;
        } elsif ($identifier =~ /^(.+[\:\/])([\.\w-]*)$/) {
            if ($2 =~ m/\.xml$/) {
                $base_filename = (defined($opt_f)) ?  $xmldirectory."/"."$opt_f"."-".$2 :$xmldirectory."/".$2;
            } else {
                $base_filename = defined($opt_f) ? $xmldirectory."/"."$opt_f"."-".$2.".xml" : $xmldirectory."/".$2.".xml";
            }
            $xmdfile = $base_filename;
            $xmdfile =~ s/\.xml$/\.xmd/g;
        } else {
            print("Wrong identifier format:\n\t$identifier\n".
                "\t".$record->toString."\n");
            next;
        }
        print "\tFiles to generate: \n\t$base_filename\n\t$xmdfile\n";

        #
        # Parse metadata
        #
        # Need to change the handling of deleted records.
        #
        if ($status eq "deleted") {
            my $nullDoc = new XML::LibXML::Document($oaiDoc->version, 
                $oaiDoc->encoding);
            print "\tThis record has status: ".
                "$status ".
                "an XMD file with status=\"deleted\" will be generated\n";
            print "Something failed generating XMD for $base_filename\n" if
                (generate_xmd($xmdfile,$status,$mmdir,$ownertag,$mdstd));
        } else {
            eval {
                # get the dif-node, this is the first (and only)
                # element-node of metadata
                my @difNodes = map {$_->nodeType == XML_ELEMENT_NODE ? $_ : ();}
                    $xpath->findnodes("oai:metadata", $record)->item(0)->childNodes;
                my $difDoc = new XML::LibXML::Document($oaiDoc->version, 
                    $oaiDoc->encoding);
                $difDoc->setDocumentElement($difNodes[0]);
                # Storing metadata in the original GCMD DIF format
                open FH, ">$base_filename" 
                    or die "Can't open $base_filename\n";
                print FH $difDoc->toString;
                close FH;
            }; 
            if ($@) {
                print("CONTENT: No DIF element in record $i: $@ ". 
                    $record->toString);
                return;
            }
        }
        print "Something failed generating XMD for $base_filename\n" if
            (generate_xmd($xmdfile,$status,$mmdir,$ownertag,$mdstd));
    }

    # 
    # Check for resumptionToken
    #
    my $resumptionToken;
    foreach my $resumptionNode ($xpath->findnodes("//oai:resumptionToken", $oaiDoc)) {
         # should be max one
         $resumptionToken = $resumptionNode->textContent;
         print("Found resumptionNode with token:\n\t$resumptionToken\n");
    }
    return $resumptionToken;
}

sub process_CSWISO_records {
    # parse ISO XML and extract records
    my($content_from_get) = @_;
    my $parser = new XML::LibXML();
    my $cswDoc;
    eval {
        $cswDoc = $parser->parse_string($content_from_get);
        print("\n\n");
        print("Successfully parsed the CSW XML...\n");
        if ($harvest_schema) {
            print("Validating using $harvest_schema...\n");
            $harvest_schema->validate($cswDoc);
            print("Validated document...\n");
        }
    };

    die "XML parser error: $@" if $@;

    print("Preparing XPATH traversing of data...\n");
    my $xpath = XML::LibXML::XPathContext->new();
    $xpath->registerNs('csw', 'http://www.opengis.net/cat/csw/2.0.2');
    $xpath->registerNs('gmd', 'http://www.isotc211.org/2005/gmd');

    print("Looking for metadata records in the CSW response...\n");
    my @records = $xpath->findnodes("/csw:GetRecordsResponse/".
            "csw:SearchResults/gmd:MD_Metadata", $cswDoc); 
    print("Found ", scalar @records, " ISO records\n");
    my $i;
    foreach my $record (@records) {
        #print("[".$record->string_value()."]\n");
        if ($xpath->exists("gmd:identificationInfo",$record)) {
            print("Node exists...\n");
        }
        my $mydata = eval{$xpath->findnodes("gmd:identificationInfo". $record)};
        print(">>> ".dump($mydata)."\n");
        exit;
        $i++;
        my $identifier = eval {
            trim($xpath->findnodes("gmd:identificationInfo/".
                        "gmd:citation/gmd:CI_Citation/".
                        "gmd:identifier/gmd:RS_Identifier/".
                        "gmd:code/gco:CharacterString", 
                        $record)->[0]); 
            };
        if ($@ or (!$identifier)) {
            print("No identifier in record $i: $@\n" . $record->toString);
            return;
        }
        print("while testing...\n");
        next;
        my $datestamp;
        eval { $datestamp = $xpath->findnodes("oai:header/oai:datestamp", $record)->item(0)->textContent };
        if ($@) {
            print("No datestamp: $@\n" . $record->toString);
            return;
        }
        #optional status
        my @statusNodes = $xpath->findnodes('oai:header/@status', $record);
        my $status = "active";
        if (@statusNodes > 0) {
            $status  = $statusNodes[0]->getValue;
        }

        #
        # Construct dataset name and filename from identifier:
        #
        my $base_filename;
        if ($identifier =~ /^[^:]*:([^:]+):(.*$)/) {
            my $localid = $2;
            my $localid_sane = &makesane($localid);
            $base_filename = $xmldirectory . '/' . $localid_sane;
        } else {
            #$log->error("Wrong identifier format: $identifier\n" . $record->toString);
            print("Wrong identifier format: $identifier\n" . $record->toString);
            return;
        }

        #
        # parse metadata
        #
        if ($status eq "deleted") {
            my $nullDoc = new XML::LibXML::Document($cswDoc->version, $cswDoc->encoding);
        } else {
            eval {
                # get the dif-node, this is the first (and only) element-node of metadata
                my @difNodes = map {$_->nodeType == XML_ELEMENT_NODE ? $_ : ();}
                    $xpath->findnodes("oai:metadata", $record)->item(0)->childNodes;
                my $difDoc = new XML::LibXML::Document($cswDoc->version, $cswDoc->encoding);
                $difDoc->setDocumentElement($difNodes[0]);
                # only storing the dataset information from the
                # transformed document storing metadata in original dif
                # format
            }; if ($@) {
                print("CONTENT: No DIF element in record $i: $@ " . $record->toString);
                return;
            }
        }
    }
}

#
#-----------------------------------------------------------------------
# eat a local file
#
sub getContentFromFile {
    my ($file) = @ARGV;
    open my $f, $file or die "Cannot read $file: $!";
    local $/ = undef;
    my $content = <$f>;
    close $f;
    return $content;
}

#
#-----------------------------------------------------------------------
# get the decoded content from an url
#
sub getContentFromUrl {
    my $urlsent = shift or die "Missing URL in getContentFromUrl()";
    # Send GET request
    # and receive response object in $getrequest:
    print("Send GET request: $urlsent\n");
    my $useragent = LWP::UserAgent->new;
    $useragent->timeout(60*15);
    my $getrequest = $useragent->get($urlsent);
    my $content_from_get = '';
    if ($getrequest->is_success) {
        $content_from_get = $getrequest->decoded_content || '';
    } else {
        my $stat = $getrequest->status_line || '';
        print("GET did not succeed: " . $stat . $content_from_get);
        die $stat;
    }
    print("GET request returned " . length($content_from_get) . " bytes\n");
    return $content_from_get;
}

#
#-----------------------------------------------------------------------
#
sub makesane {
#
#     Split argument array into variables
#
    my ($string) = @_;
    my %convertions = ();
#
#    foreach value in a list
#
    foreach my $special ( ';','/','?',':','@','&','=','+','$',',','-','!','~','*','(',')','%') {
#
#        Create a string using printf-compatible format:
#
        $convertions{$special} = sprintf('%02x',ord($special));
    }
#
#     Length of string
#
    my $length = length($string);
    my $newstring = '';
    for (my $i1=0; $i1 < $length; $i1++) {
#
#        Extract a substring from a string (first character has offset 0):
#
        my $ch1 = substr($string,$i1,1);
        if (exists($convertions{$ch1})) {
            $newstring .= '-' . $convertions{$ch1};
        }
        else {
            $newstring .= $ch1;
        }
    }
    return $newstring;
}


sub trim {
    my ($string) = @_;
    $string =~ s/^\s*//m;
    $string =~ s/\s*$//m;
    return $string;
}

#
# Generate XMD files to accompany the metadata harvested. XMD files are
# used to control how the system is handling the harvested metadata.
#
# Add validation with provided schema in time. 
# Øystein Godøy, METNO/FOU, 2013-11-04 
#
sub generate_xmd {
    my($fname,$dstatus,$mmdir,$dtag,$dformat) = @_;
    my $dname = basename($fname);
    $dname =~ s/\.xmd$//g;
    my($retval, $xmdcontent, $fexists);
    $retval = $fexists = 0;
    my $xmdtemplate = <<XMDT;
<?xml version="1.0" encoding="iso8859-1" ?>
<?xml-stylesheet href="dataset.xsl" type="text/xsl"?>
<dataset
   xmlns="http://www.met.no/schema/metamod/dataset"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://www.met.no/schema/metamod/dataset https://wiki.met.no/_media/metamod/dataset.xsd">
  <info name="MMDIR/TMPNAME" 
        status="TMPSTATUS" 
        ownertag="TMPTAG"
        creationDate="2008-10-31T14:30:00Z"
        datestamp="2008-10-31T14:30:00Z"
        metadataFormat="TMPFORMAT" />
</dataset>
XMDT

    #
    # Check if XMD file for this dataset already exists, if so read and
    # modify this. 
    #
    # Should check that the read file actually validates before further
    # processing.
    #
    print "$fname\n";
    if (-s $fname) {
        open(FH, "$fname") or die "Something is rotten, $fname exists but is not available for opening\n";
        read(FH, $xmdcontent, -s $fname) or die "Can't open $fname\n";
        close(FH);
        $fexists = 1;
    } else {
        $xmdcontent = $xmdtemplate;
    }

    if (defined($mmdir)) {
        $xmdcontent =~ s/MMDIR/$mmdir/g;
    } else {
        $xmdcontent =~ s/MMDIR\///g;
    }
    $xmdcontent =~ s/TMPTAG/$dtag/g;
    $xmdcontent =~ s/TMPNAME/$dname/g;
    $xmdcontent =~ s/TMPFORMAT/$dformat/g;
    $xmdcontent =~ s/TMPSTATUS/$dstatus/g;
    $xmdcontent =~ s/(status=")(active|deleted)(")/$1$dstatus$3/g;
    unless ($fexists) {
        $xmdcontent =~ s/(creationDate=\")(\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\d).*(Z\")/$1$timenow$3/g; 
    }
    $xmdcontent =~ s/(datestamp=\")(\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\d).*(Z\")/$1$timenow$3/g;

    #
    # Dump XMD content to file.
    #
    open(FH, ">$fname") or die "Could not generate $fname\n";
    print FH $xmdcontent."\n";
    close(FH);

    return($retval);
}

sub usage {

    print "$0 -i <URL> -o <dir> -p <protocol> -d <dir> -t <ownertag> -f
    <fpre> -m <md> -s <set> -r <fromdate>\n";
    print "\t<URL>: CSW or OAI-PMH URL to use, including name of service.\n";
    print "\t<dir>: dir to dump harvest into\n";
    print "\t<protocol>: which protocol to use (OGC-CSW or OAI-PMH)\n";
    print "\t<dir>: internal XML dir in METAMOD\n";
    print "\t<ownertag>: which ownertag (short 2-5 letters tag) to use\n";
    print "\t<fpre>: file prefix (if necessary)\n";
    print "\t<md>: metadata prefix to use for e.g. OAI-PMH requests\n";
    print "\t<set>: OAI-PMH set specification (if needed/supported)\n";
    print "\t<fromdate>: ISO8601 date from which records are harvested\n";
    print "\n";
    print "Only OAI-PMH works properly currently.\n";

    exit(1);
}
